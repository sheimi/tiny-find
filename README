TINY-FIND 
==============
Homework -- to fake a command like find >_<!~~~

-----------
1. OVERVIEW
-----------
This is my homework of "Linux Programming". 
This is the of "Tiny Find", my version of "find".

----------------
2. SPECIFICATION
----------------
tinyfind path <expressions>
~~~~~~~~~~~~~~~~
Logic Expression
~~~~~~~~~~~~~~~~
exps can linked with logic expression and '(', ')' 
-not
-and
-or
'(', ')' should be used after Escape character \. exp '\(' and '\(' 

~~~~~~~~~
Functions
~~~~~~~~~
-exec [argv] \;
  if it is true, excute the cmd.(default: print) 
-name
  True if the last component of the pathname being examined matches pattern.
  Special shell pattern matching characters (``['', ``]'', ``*'', and ``?'')
  may be used as part of pattern.  These characters may be matched 
  explicitly by escaping them with a backslash (``\'').
-iname
  Like -name, but the match is case insensitive
-user [username | user_id]
  True if the file belongs to the user
-group [groupname | group_id]
  True if the file belongs to the group
-perm [perm(exp 777)]
  True if the file match such perm
-regex [reg]
  True if the filename match the regex expression
-amin [n]
  True if the file is accessed in n minutes 
-atime [n]
  True if the file is accessed in n days 
-anewer [file2]
  True if the file is accessed later than file2
-cmin [n]
  True if the file is changed in n minutes 
-ctime [n]
  True if the file is changed in n days 
-cnewer [file2]
  True if the file is changed later than file2
-mmin [n]
  True if the file is modified in n minutes 
-mtime [n]
  True if the file is modified in n days 
-mnewer [file2]
  True if the file is modified later than file2
-type [b|c|d|f|l|p]
  b       block special
  c       character special
  d       directory
  f       regular file
  l       symbolic link
  p       FIFO
  s       socket
-size
  True if the file's size, rounded up, in 512-byte blocks is n. 
  If n is followed by a c, then the primary is true if the file's 
  size is n bytes (characters).  Similarly if n is followed by a 
  scale indicator then the file's size is compared to n scaled as:

    k       kilobytes (1024 bytes)
    M       megabytes (1024 kilobytes)
    G       gigabytes (1024 megabytes)
    T       terabytes (1024 gigabytes)
    P       petabytes (1024 terabytes)

---------
3. DESIGN
---------
~~~~~~~~~~~~
SOURCE FILES
~~~~~~~~~~~~
the src folder include:
  Makefile    the makefile of the tool
  env.h       | global include and define

  parser.h    | the parser of expressions from the bash.
  parser.c    | it will translate the exp to postfix expression

  filter.h    | build the filter tree and  
  filter.c    | inplement all the filters

  tinyfind.c  | the main file of tool and it use api to 
              | traverse a file hierarchy   

~~~~~~~~~~~~~
FILTER DESIGN
~~~~~~~~~~~~~
a. Filter Tree And Filter
   Filter tree is a binary tree with node has a two pointer, passed and failed.
   If the filter fails, it will exicute the filter that failed pointer pointed.
   For example:
     Filter Tree
        root
         |
      filter1 --<test fail>-- filter2--<test fail>--false
         |                      |
    <test pass>              <test pass>
         |                      |
      filter3--<return if      true
         |           fail >
    <test pass>
         |
        true
   Filter contains a pointer to a filter_cmd.
     filter_cmd  | a function pointer which contains the test function to test   
                 | whether a file can meets a expression
   Filter contains a FilterType.
     FilterType  | it is a enum and cantains the type information of a filter
   Filter contains a void pointer, info.
     info        | it contains some necessary information of a specific filter
   each filter should implement at least two function:
     init_xxx    | to init the a filter
     xxx_filter  | it is filter_cmd, the test function.

b. Build the Filter Tree
   There are three functions to build the tree
     filter_and  | connect to filter tree with and operation
     filter_or   | connect to filter tree with or operation
     filter_not  | wrap a filter in a not filter adapter
   There are a stack to compute logic operations.

c. RELEASE the Filter Tree
   There is a list to track all the filters.
   if a filter should release the information in filter, it should be add to
   the _free_filter fuction. 

-------------
4. COMPARISON
-------------
It can have a tree of test functions 'predicate tree'
It uses 'fts' api to traverse a file hierarchy
pred.c    | it contains all the test functions
tree.c    | to connect all the test functions into a tree

In my version of 'find', filter tree plays a similar role as tree 
and filter plays a similar role as predicate.

The offical 'find' also has a parser to parse the bash parameters, but it is 
more powerful.



